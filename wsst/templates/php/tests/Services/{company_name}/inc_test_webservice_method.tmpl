    function test<%[$method{class_name}]%>()
    {
        $obj = new <%[$package_name]%>();
<%[ for (my $i = 0; $i < @{$method{tests}}; $i++) {
    my $test = $method{tests}->[$i];
    my $name = $test->{name} || "Test[$i]";

    $OUT .= "\n";
    $OUT .= "        // $name\n";
    $OUT .= "        \$params = array(\n";
    foreach my $key (sort keys %{$test->{params}}) {
        my $val = $test->{params}->{$key};
        unless ($val =~ s/^\$(.*)$/getenv('$1')/) {
            $val = "'$val'";
        }
        $OUT .= "            '$key' => $val,\n";
    }
    $OUT .= "        );\n";

    $OUT .= "        \$res =& \$obj->$method{interface_name}(\$params);\n";

    if ($test->{type} eq 'lib_error') {
        $OUT .= "        \$this->assertTrue(PEAR::isError(\$res), '${name}: isError');\n";
    } elsif ($test->{type} eq 'error') {
        $OUT .= "        \$this->assertFalse(PEAR::isError(\$res), '${name}: isError');\n";
        $OUT .= "        \$data = \$res->getData();\n";
        $OUT .= "        \$this->assertNotNull(\$data, '${name}: getData');\n";
        my $ret_test = [map {['', $_]} @{$method{'error'}->{children}}];
        while (my $ret = shift(@$ret_test)) {
            next if $ret->[1]->{nullable} eq 'true';
            $OUT .= "        \$this->assertObjectHasAttribute('$ret->[1]->{name}', \$data$ret->[0], '${name}: $ret->[1]->{name}');\n";
            $OUT .= "        \$this->assertType('array', \$data$ret->[0]\->$ret->[1]->{name}, '${name}: $ret->[1]->{name}');\n"
                if $ret->[1]->{multiple} eq 'true';
            next unless $ret->[1]->{children};
            my $next_node = $ret->[0].'->'.$ret->[1]->{name};
            $next_node .= '[0]'
                if $ret->[1]->{multiple} eq 'true';
            push(@$ret_test, map {[$next_node, $_]} @{$ret->[1]->{children}});
        }
    } else {
        $OUT .= "        \$this->assertFalse(PEAR::isError(\$res), '${name}: isError');\n";
        $OUT .= "        \$data = \$res->getData();\n";
        $OUT .= "        \$this->assertNotNull(\$data, '${name}: getData');\n";
        my $ret_test = [map {['', $_]} @{$method{'return'}->{children}}];
        while (my $ret = shift(@$ret_test)) {
            next if $ret->[1]->{nullable} eq 'true';
            $OUT .= "        \$this->assertObjectHasAttribute('$ret->[1]->{name}', \$data$ret->[0], '${name}: $ret->[1]->{name}');\n";
            $OUT .= "        \$this->assertType('array', \$data$ret->[0]\->$ret->[1]->{name}, '${name}: $ret->[1]->{name}');\n"
                if $ret->[1]->{multiple} eq 'true';
            next unless $ret->[1]->{children};
            my $next_node = $ret->[0].'->'.$ret->[1]->{name};
            $next_node .= '[0]'
                if $ret->[1]->{multiple} eq 'true';
            push(@$ret_test, map {[$next_node, $_]} @{$ret->[1]->{children}});
        }
    }
} ]%>
    }
