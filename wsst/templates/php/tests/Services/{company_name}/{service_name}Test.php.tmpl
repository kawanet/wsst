<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Test case for the class "<%[$package_name]%>"
 *
 * PHP versions 5
<%[ if ($php_license_abstract) {
    $OUT .= " *\n";
    $php_license_abstract =~ s/^\s+//;
    $php_license_abstract =~ s/\s+$//;
    $php_license_abstract =~ s/\n/\n * /g;
    $OUT .= " * LICENSE: $php_license_abstract\n";
} ]%> *
 * @category   Services
 * @package    <%[$package_name]%>
<%[ foreach (@author) {
    $OUT .= " * \@author     $_\n";
} ]%><%[ if ($php_copyright||$copyright) {
    local $copyright = ($php_copyright||$copyright);
    $OUT .= " * \@copyright  $copyright\n";
} ]%> * @license    <%[$php_license_uri]%> <%[$license]%>
 * @version    Release: @package_version@
 * @link       <%[$php_link]%>
 */

require_once 'PEAR.php';
require_once 'PHPUnit/Framework.php';
require_once '<%[$package_dir]%>.php';

/**
 * Test class for <%[$package_name]%>
 *
 * @category   Services
 * @package    <%[$package_name]%>
<%[ foreach (@author) {
    $OUT .= " * \@author     $_\n";
} ]%><%[ if ($php_copyright||$copyright) {
    local $copyright = ($php_copyright||$copyright);
    $OUT .= " * \@copyright  $copyright\n";
} ]%> * @license    <%[$php_license_uri]%> <%[$license]%>
 * @version    Release: @package_version@
 * @link       <%[$php_link]%>
 */
class <%[$package_name]%>Test extends PHPUnit_Framework_TestCase
{
    public function testDefaultNew()
    {
        $obj = new <%[$package_name]%>();
        $this->assertNotNull($obj);
        $this->assertTrue(($obj->getFactory() instanceof <%[$package_name]%>_Factory), 'factory');
        $this->assertEquals(array(), $obj->getCommonParams(), 'common_params');
    }
    
    public function testPramedNew()
    {
        $params = array(
            'key' => 'XXXXXXXX',
        );
        $obj = new <%[$package_name]%>($params);
        $this->assertNotNull($obj);
        $this->assertTrue(($obj->getFactory() instanceof <%[$package_name]%>_Factory), 'factory');
        $this->assertEquals($params, $obj->getCommonParams(), 'common_params');
        
        $fac = new <%[$package_name]%>Test_MyFactory();
        $obj = new <%[$package_name]%>($params, $fac);
        $this->assertNotNull($obj);
        $this->assertTrue(($obj->getFactory() instanceof <%[$package_name]%>_Factory), 'factory2');
        $this->assertSame($fac, $obj->getFactory(), 'factory2_same');
        $this->assertEquals($params, $obj->getCommonParams(), 'common_params2');
    }
    
    public function testGetSetFactory()
    {
        $obj = new <%[$package_name]%>();
        $fac = new <%[$package_name]%>Test_MyFactory();
        $this->assertNotSame($fac, $obj->getFactory(), 'factory_notsame');
        $obj->setFactory($fac);
        $this->assertSame($fac, $obj->getFactory(), 'factory_same');
    }
    
    public function testGetSetAddCommonParams()
    {
        $obj = new <%[$package_name]%>(array('val1'=>1));
        $this->assertEquals(array('val1'=>1), $obj->getCommonParams());
        
        $obj->addCommonParams(array('val2'=>2));
        $this->assertEquals(array('val1'=>1,'val2'=>2), $obj->getCommonParams());
        
        $obj->setCommonParams(array('val3'=>3));
        $this->assertEquals(array('val3'=>3), $obj->getCommonParams());
        
        $obj->addCommonParams(array('val3'=>30,'val4'=>40));
        $this->assertEquals(array('val3'=>30,'val4'=>40), $obj->getCommonParams());
    }
    
<%[ foreach my $method (@methods) {
    $OUT .= include('inc_test_webservice_method.tmpl', method=>$method);
    $OUT .= "\n";
} ]%>
}

class <%[$package_name]%>Test_MyFactory extends <%[$package_name]%>_Factory
{
}
 
?>
