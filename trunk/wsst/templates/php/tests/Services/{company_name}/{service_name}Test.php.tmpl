<?php

[% INCLUDE inc_test_file_header.tmpl file_title="Test case for the class \"$package_name\"" -%]

require_once 'PEAR.php';
require_once 'PHPUnit/Framework.php';
require_once '[% package_dir %].php';

[% INCLUDE inc_class_header.tmpl class_title="Test class for $package_name" -%]
class [% package_name %]Test extends PHPUnit_Framework_TestCase
{
    public function testDefaultNew()
    {
        $obj = new [% package_name %]();
        $this->assertNotNull($obj);
        $this->assertTrue(($obj->getFactory() instanceof [% package_name %]_Factory), 'factory');
        $this->assertEquals(array(), $obj->getCommonParams(), 'common_params');
    }
    
    public function testPramedNew()
    {
        $params = array(
            'key' => 'XXXXXXXX',
        );
        $obj = new [% package_name %]($params);
        $this->assertNotNull($obj);
        $this->assertTrue(($obj->getFactory() instanceof [% package_name %]_Factory), 'factory');
        $this->assertEquals($params, $obj->getCommonParams(), 'common_params');
        
        $fac = new [% package_name %]Test_MyFactory();
        $obj = new [% package_name %]($params, $fac);
        $this->assertNotNull($obj);
        $this->assertTrue(($obj->getFactory() instanceof [% package_name %]_Factory), 'factory2');
        $this->assertSame($fac, $obj->getFactory(), 'factory2_same');
        $this->assertEquals($params, $obj->getCommonParams(), 'common_params2');
    }
    
    public function testGetSetFactory()
    {
        $obj = new [% package_name %]();
        $fac = new [% package_name %]Test_MyFactory();
        $this->assertNotSame($fac, $obj->getFactory(), 'factory_notsame');
        $obj->setFactory($fac);
        $this->assertSame($fac, $obj->getFactory(), 'factory_same');
    }
    
    public function testGetSetAddCommonParams()
    {
        $obj = new [% package_name %](array('val1'=>1));
        $this->assertEquals(array('val1'=>1), $obj->getCommonParams());
        
        $obj->addCommonParams(array('val2'=>2));
        $this->assertEquals(array('val1'=>1,'val2'=>2), $obj->getCommonParams());
        
        $obj->setCommonParams(array('val3'=>3));
        $this->assertEquals(array('val3'=>3), $obj->getCommonParams());
        
        $obj->addCommonParams(array('val3'=>30,'val4'=>40));
        $this->assertEquals(array('val3'=>30,'val4'=>40), $obj->getCommonParams());
    }
[% FOREACH method = methods -%]

    public function test[% method.class_name %]()
    {
        $obj = new [% package_name %]();
[% FOREACH test = method.tests -%]
[% name = (test.name or "Test[${loop.index}]") -%]

        // [% name %]
        $params = array(
[% FOREACH key = sort_keys(test.params) -%]
            '[% key %]' => [% test.params.$key | $env_param %],
[% END -%]
        );
        $res =& $obj->[% method.interface_name %]($params);
[% SWITCH test.type -%]
[% CASE "lib_error" -%]
        $this->assertTrue(PEAR::isError($res), '[% name %]: isError');
[% CASE "error" -%]
        $this->assertTrue(PEAR::isError($res), '[% name %]: isError');
[% CASE -%]
        $this->assertFalse(PEAR::isError($res), '[% name %]: isError');
        $data = $res->getData();
        $this->assertNotNull($data, '[% name %]: getData');
[% FOREACH node = method.return.to_array -%]
[% NEXT IF node.depth < 2 -%]
[% NEXT IF node_nullable(node) -%]
        $this->assertObjectHasAttribute('[% node.name %]', $data[% node_access(node.parent, 1) %], '[% name %]: [% node.name %]');
[% IF node.multiple -%]
        $this->assertType('array', $data[% node_access(node) %], '[% name %]: [% node.name %]');
[% END -%]
[% END -%]
[% END -%]
[% END -%]
    }
[% END -%]
}

class [% package_name %]Test_MyFactory extends [% package_name %]_Factory
{
}
 
?>
